// <auto-generated />
using FlotteApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlotteApplication.Migrations
{
    [DbContext(typeof(DataSource))]
    partial class DataSourceModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlotteApplication.Models.Admin", b =>
                {
                    b.Property<int>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("adminId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("adminId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("adminId");

                    b.HasIndex("name")
                        .IsUnique();

                    b.HasIndex("password")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("FlotteApplication.Models.Engin", b =>
                {
                    b.Property<int>("enginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("enginId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("enginId"));

                    b.Property<int>("ProprietaireId")
                        .HasColumnType("int");

                    b.Property<int>("categorie")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("int");

                    b.Property<string>("couleur")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("immatriculation")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("marque")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("enginId");

                    b.HasIndex("ProprietaireId");

                    b.HasIndex("immatriculation")
                        .IsUnique();

                    b.ToTable("Engin");
                });

            modelBuilder.Entity("FlotteApplication.Models.Facture", b =>
                {
                    b.Property<int>("factureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("facId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("factureId"));

                    b.Property<string>("dateFacture")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("enginId")
                        .HasColumnType("int")
                        .HasColumnName("engId");

                    b.Property<float>("montatTotal")
                        .HasColumnType("real");

                    b.Property<int?>("quotationId")
                        .HasColumnType("int");

                    b.HasKey("factureId");

                    b.HasIndex("enginId");

                    b.ToTable("Facture");
                });

            modelBuilder.Entity("FlotteApplication.Models.Proprietaire", b =>
                {
                    b.Property<int>("proprietaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("proId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("proprietaireId"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("type")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("int");

                    b.HasKey("proprietaireId");

                    b.ToTable("Proprietaire");
                });

            modelBuilder.Entity("FlotteApplication.Models.Quotation", b =>
                {
                    b.Property<int>("quotationId")
                        .HasColumnType("int")
                        .HasColumnName("quoId");

                    b.Property<float>("majoration")
                        .HasColumnType("real");

                    b.Property<float>("reduction")
                        .HasColumnType("real");

                    b.Property<float>("tarifDeBase")
                        .HasColumnType("real");

                    b.Property<float>("valeurDuVehicule")
                        .HasColumnType("real");

                    b.HasKey("quotationId");

                    b.ToTable("Quotation");
                });

            modelBuilder.Entity("FlotteApplication.Models.Engin", b =>
                {
                    b.HasOne("FlotteApplication.Models.Proprietaire", "Proprietaire")
                        .WithMany("ListEngins")
                        .HasForeignKey("ProprietaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proprietaire");
                });

            modelBuilder.Entity("FlotteApplication.Models.Facture", b =>
                {
                    b.HasOne("FlotteApplication.Models.Engin", "Engin")
                        .WithMany("factures")
                        .HasForeignKey("enginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Engin");
                });

            modelBuilder.Entity("FlotteApplication.Models.Quotation", b =>
                {
                    b.HasOne("FlotteApplication.Models.Facture", "Facture")
                        .WithOne("Quotation")
                        .HasForeignKey("FlotteApplication.Models.Quotation", "quotationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Facture");
                });

            modelBuilder.Entity("FlotteApplication.Models.Engin", b =>
                {
                    b.Navigation("factures");
                });

            modelBuilder.Entity("FlotteApplication.Models.Facture", b =>
                {
                    b.Navigation("Quotation")
                        .IsRequired();
                });

            modelBuilder.Entity("FlotteApplication.Models.Proprietaire", b =>
                {
                    b.Navigation("ListEngins");
                });
#pragma warning restore 612, 618
        }
    }
}
